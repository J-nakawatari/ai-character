'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import styles from './QuickActions.module.css';

/**
 * QuickActions - „Ç≥„É≥„ÉÜ„Ç≠„Çπ„ÉàË™çË≠òÂûã„Éï„É≠„Éº„ÉÜ„Ç£„É≥„Ç∞„Ç¢„ÇØ„Ç∑„Éß„É≥
 * ÁèæÂú®„ÅÆÁîªÈù¢„ÅßÊúÄ„ÇÇ‰Ωø„ÅÑ„Åù„ÅÜ„Å™„Ç¢„ÇØ„Ç∑„Éß„É≥„ÇíÊèê‰æõ
 */
const QuickActions = ({ 
  context, 
  user, 
  isAdmin, 
  locale 
}) => {
  const router = useRouter();
  const [isExpanded, setIsExpanded] = useState(false);

  // „Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà„Å´Âøú„Åò„Åü„Ç¢„ÇØ„Ç∑„Éß„É≥„ÇíÂÆöÁæ©
  const getActions = () => {
    switch (context) {
      case 'chat':
        return [
          {
            icon: 'üîÑ',
            label: 'Êñ∞„Åó„ÅÑ‰ºöË©±',
            action: () => window.location.reload(),
            primary: true
          },
          {
            icon: '‚ú®',
            label: '„Ç≠„É£„É©„ÇØ„Çø„ÉºÂ§âÊõ¥',
            action: () => router.push(`/${locale}/setup?reselect=true`)
          },
          {
            icon: 'üìã',
            label: '‰ºöË©±Â±•Ê≠¥',
            action: () => console.log('‰ºöË©±Â±•Ê≠¥')
          }
        ];

      case 'overview':
        if (isAdmin) {
          return [
            {
              icon: '‚ûï',
              label: 'Êñ∞Ë¶è‰ΩúÊàê',
              action: () => router.push('/admin/characters/new'),
              primary: true
            },
            {
              icon: 'üë•',
              label: '„É¶„Éº„Ç∂„ÉºÁÆ°ÁêÜ',
              action: () => router.push('/admin/users')
            },
            {
              icon: 'üìä',
              label: '„É¨„Éù„Éº„Éà',
              action: () => console.log('„É¨„Éù„Éº„Éà')
            }
          ];
        } else {
          return [
            {
              icon: 'üí¨',
              label: '„ÉÅ„É£„ÉÉ„ÉàÈñãÂßã',
              action: () => router.push(`/${locale}/chat`),
              primary: true
            },
            {
              icon: '‚ú®',
              label: '„Ç≠„É£„É©„ÇØ„Çø„ÉºÈÅ∏Êäû',
              action: () => router.push(`/${locale}/setup`)
            }
          ];
        }

      case 'character-management':
        return [
          {
            icon: '‚ûï',
            label: 'Êñ∞Ë¶è„Ç≠„É£„É©„ÇØ„Çø„Éº',
            action: () => router.push('/admin/characters/new'),
            primary: true
          },
          {
            icon: 'üìÅ',
            label: '„Ç§„É≥„Éù„Éº„Éà',
            action: () => console.log('„Ç§„É≥„Éù„Éº„Éà')
          },
          {
            icon: 'üîÑ',
            label: 'Êõ¥Êñ∞',
            action: () => window.location.reload()
          }
        ];

      case 'user-management':
        return [
          {
            icon: 'üë§',
            label: 'Êñ∞Ë¶è„É¶„Éº„Ç∂„Éº',
            action: () => console.log('Êñ∞Ë¶è„É¶„Éº„Ç∂„Éº'),
            primary: true
          },
          {
            icon: 'üì§',
            label: '„Ç®„ÇØ„Çπ„Éù„Éº„Éà',
            action: () => console.log('„Ç®„ÇØ„Çπ„Éù„Éº„Éà')
          },
          {
            icon: 'üîÑ',
            label: 'Êõ¥Êñ∞',
            action: () => window.location.reload()
          }
        ];

      case 'character-selection':
        return [
          {
            icon: 'üé≤',
            label: '„É©„É≥„ÉÄ„É†ÈÅ∏Êäû',
            action: () => console.log('„É©„É≥„ÉÄ„É†ÈÅ∏Êäû'),
            primary: true
          },
          {
            icon: '‚≠ê',
            label: '„ÅäÊ∞ó„Å´ÂÖ•„Çä',
            action: () => console.log('„ÅäÊ∞ó„Å´ÂÖ•„Çä')
          }
        ];

      case 'profile':
        return [
          {
            icon: '‚úèÔ∏è',
            label: '„Éó„É≠„Éï„Ç£„Éº„É´Á∑®ÈõÜ',
            action: () => router.push(`/${locale}/mypage#edit`),
            primary: true
          },
          {
            icon: 'üîí',
            label: '„Çª„Ç≠„É•„É™„ÉÜ„Ç£',
            action: () => router.push(`/${locale}/mypage#security`)
          }
        ];

      default:
        return [
          {
            icon: 'üè†',
            label: '„Éõ„Éº„É†',
            action: () => router.push(`/${locale}/dashboard`),
            primary: true
          }
        ];
    }
  };

  const actions = getActions();
  if (actions.length === 0) return null;

  return (
    <div className={styles.quickActions}>
      {/* „Çµ„Éñ„Ç¢„ÇØ„Ç∑„Éß„É≥ */}
      {isExpanded && actions.slice(1).map((action, index) => (
        <button
          key={index}
          className={styles.subAction}
          onClick={() => {
            action.action();
            setIsExpanded(false);
          }}
          title={action.label}
          style={{
            transform: `translateY(-${(index + 1) * 60}px)`,
            transitionDelay: `${index * 50}ms`
          }}
        >
          <span className={styles.actionIcon}>{action.icon}</span>
          <span className={styles.actionLabel}>{action.label}</span>
        </button>
      ))}

      {/* „É°„Ç§„É≥„Ç¢„ÇØ„Ç∑„Éß„É≥ */}
      <button
        className={`${styles.mainAction} ${isExpanded ? styles.expanded : ''}`}
        onClick={() => {
          if (actions.length === 1) {
            actions[0].action();
          } else {
            setIsExpanded(!isExpanded);
          }
        }}
        title={actions[0].label}
      >
        <span className={styles.mainIcon}>
          {isExpanded ? '‚úï' : actions[0].icon}
        </span>
        <span className={styles.mainLabel}>{actions[0].label}</span>
      </button>

      {/* ËÉåÊôØ„Ç™„Éº„Éê„Éº„É¨„Ç§ */}
      {isExpanded && (
        <div 
          className={styles.backdrop}
          onClick={() => setIsExpanded(false)}
        />
      )}
    </div>
  );
};

export default QuickActions;